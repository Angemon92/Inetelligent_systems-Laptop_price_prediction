source('C:/Users/Stefan/Dropbox/workplaces/R Studio/Masinsko ucenje - FON/K-means/start.R')
Qtx = 0.00:0.99
?seq()
Qtx = seq(0.01,0.99,0.01)
hq = 1/1+exp(Qtx)
plot(hq
)
hq = 1/1+exp(-Qtx)
)
plot(hq)
Qtx = seq(0.01,3.99,0.01)
hq = 1/1+exp(-Qtx)
cost = -log(1/(1+exp()))
plot(hq)
hq
plot(Qtx,hq)
plot(Qtx,hq,type='l')
Qtx = seq(0.001,3.999,0.001)
hq = 1/1+exp(-Qtx)
plot(Qtx,hq,type='l')
plot(Qtx,hq,type='l',ylim=c(0,4))
plot(Qtx,hq,type='l')
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # zar hq nije u intervalu [0,1] ?
cost = -log(1/(1+exp()))
cost = -log(1/(1+exp(-Qtx)))
plot(hq,cost)
log()
?log()
Qtx = seq(0.00001,3.99009,0.00001)
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # hq E [0.5,1)
cost = -log(1/(1+exp(-Qtx)))
plot(hq,cost)
Qtx = seq(0.00001,2.99009,0.00001)
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # hq E [0.5,1)
cost = -log(1/(1+exp(-Qtx)))
plot(hq,cost)
Qtx = seq(0,1000,0.00001)
Qtx = seq(0,1000,0.001)
hq = 1/(1+exp(-Qtx))
plot(hq)
Qtx = seq(0,10,0.001)
hq = 1/(1+exp(-Qtx))
plot(hq)
Qtx = seq(-10,10,0.001)
hq = 1/(1+exp(-Qtx))
plot(hq) # desni deo sigmidne funkcije
plot(Qtx,hq,type='l') # hq E [0.5,1)
Qtx = seq(-20,20,0.001)
hq = 1/(1+exp(-Qtx))
plot(hq) # desni deo sigmidne funkcije
plot(Qtx,hq,type='l') # hq E [0.5,1)
Qtx = seq(-10,10,0.001)
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # hq E [0.5,1)
cost = -log(1/(1+exp(-Qtx)))
plot(hq,cost)
plot(hq,cost,type='l')
Qtx = seq(0,10,0.001)
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # hq E [0.5,1)
cost = -log(1/(1+exp(-Qtx)))
plot(hq,cost,type='l')
Qtx = seq(-10,10,0.001)
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # hq E [0.5,1)
cost = -log(1/(1+exp(-Qtx)))
plot(hq,cost,type='l')
J = log(1/(1+exp(-Qtx))) + log(1-1/(1+exp(-Qtx)))
rm(list=ls())
Qtx = seq(-10,10,0.001)
J = log(1/(1+exp(-Qtx))) + log(1-1/(1+exp(-Qtx)))
plot(J,Qxt)
plot(J,Qtx)
plot(J,Qtx, type='l')
J = log(Qtx) + log(1-Qtx)
Qtx = seq(0,10,0.001)
J = log(Qtx) + log(1-Qtx)
/rand
?rand
?ran
?random
?r
y = runif(10000,0,1)
J = (1/(1+exp(-Qtx)) - y) ^2
plot(J)
J = (Qtx - y)^2
y = runif(10001,0,1)
J = (Qtx - y)^2
plot(J)
plot(J,Qtx, type='l')
plot(Qtx,J, type='l')
Qtx = seq(-10,10,0.001)
y = runif(10001,0,1)
J = (Qtx - y)^2
y = runif(20001,0,1)
J = (Qtx - y)^2
plot(Qtx,J, type='l')
J = (1/(1+exp(-Qtx)) - y)^2
plot(Qtx,J, type='l')
plot(Qtx,J)
plot(Qtx,J,pch='.')
J = (Qtx - y)^2
plot(Qtx,J,pch='.')
plot(J)
Qtx = seq(-10,10,0.1)
length(Qtx)
y = runif(length(Qtx),0,1)
J = (Qtx - y)^2
plot(Qtx,J,pch='.')
plot(J,pct='.')
plot(Qtx,J,pch='.')
plot(J,pct='.')
J = (1/(1+exp(-Qtx)) - y)^2
plot(J,pct='.')
plot(Qtx,J,pch='.')
Qtx = seq(-10,10,0.01)
y = runif(length(Qtx),0,1)
J = (Qtx - y)^2
plot(Qtx,J,pch='.')
plot(J,pct='.')
plot(Qtx,J,pch='.')
J = (1/(1+exp(-Qtx)) - y)^2
plot(Qtx,J,pch='.')
# resenje
J = log(1/(1+exp(-Qtx))) + log(1-1/(1+exp(-Qtx)))
plot(J,Qtx, type='l')
plot(J,Qtx)
plot(Qtx,J)
J = -log(1/(1+exp(-Qtx))) - log(1-1/(1+exp(-Qtx)))
plot(Qtx,J)
plot(Qtx,J,type='l')
Qtx = seq(-10,10,0.001)
y = runif(length(Qtx),0,1)
J = (Qtx - y)^2
plot(Qtx,J,pch='.')
J = (1/(1+exp(-Qtx)) - y)^2
plot(Qtx,J,pch='.')
y = round(runif(length(Qtx),0,1))
J = (Qtx - y)^2
plot(Qtx,J,pch='.')
J = (1/(1+exp(-Qtx)) - y)^2
plot(Qtx,J,pch='.')
# resenje
J = -log(1/(1+exp(-Qtx))) - log(1-1/(1+exp(-Qtx)))
plot(Qtx,J,type='l')
J = -log(1/(1+exp(-Qtx))) - log(1-1/(1+exp(-Qtx)))
plot(Qtx,J,type='l')
J = (Qtx - y)^2 # prema linearnoj regresiji
plot(Qtx,J,pch='.') # J konvexno
Qtx = seq(-10,10,1)
y = round(runif(length(Qtx),0,1)) # y je 1 ili 0
J = (Qtx - y)^2 # prema linearnoj regresiji
plot(Qtx,J,pch='.') # J konvexno
Qtx = seq(-10,10,0.01)
y = round(runif(length(Qtx),0,1)) # y je 1 ili 0
J = (Qtx - y)^2 # prema linearnoj regresiji
plot(Qtx,J,pch='.') # J konvexno
Qtx = seq(-10,10,0.001) # za y=1
hq = 1/(1+exp(-Qtx))
plot(Qtx,hq,type='l') # hq E [0.5,1)
cost = -log(1/(1+exp(-Qtx))) # cost za y=1
plot(hq,cost,type='l')
Qtx = seq(-10,10,0.01)
y = round(runif(length(Qtx),0,1)) # y je 1 ili 0
J = (Qtx - y)^2 # prema linearnoj regresiji
plot(Qtx,J,pch='.') # J konvexno
J = (1/(1+exp(-Qtx)) - y)^2 # promenio sam hq u sigmoidnu funkciju
plot(Qtx,J,pch='.') # J vise nije konvexno !
hq = 1/(1+exp(-Qtx))
J = (hq - y)^2 # promenio sam hq u sigmoidnu funkciju
plot(hq,J,pch='.') # J vise nije konvexno !
Qtx = seq(-10,10,0.01)
y = round(runif(length(Qtx),0,1)) # y je 1 ili 0
J = (Qtx - y)^2 # prema linearnoj regresiji
plot(Qtx,J,pch='.') # J konvexno
hq = 1/(1+exp(-Qtx))
J = (hq - y)^2 # promenio sam hq u sigmoidnu funkciju
plot(hq,J,pch='.') # J vise nije konvexno !
legend(c("a","b"))
?legend
J = -log(1/(1+exp(-Qtx))) - log(1-1/(1+exp(-Qtx)))
plot(Qtx,J,type='l')
J = (hq - y)^2 # promenio sam hq u sigmoidnu funkciju
plot(hq,J,pch='.') # J vise nije konvexno !
J = -log(1/(1+exp(-Qtx))) - log(1-1/(1+exp(-Qtx)))
plot(Qtx,J,type='l')
exp(-3)
exp(-30)
exp(-300)
exp(10)
exp(3)
exp(100)
exp(10)
x=1:100
plot(exp(x))
plot(exp(x),type='l')
x=-10:10
plot(exp(x),type='l')
x=-5:10
plot(exp(x),x,type='l')
plot(x,exp(x),type='l')
x=-2:120
plot(x,exp(x),type='l')
x=-2:12
plot(x,exp(x),type='l')
x=-2:5
plot(x,exp(x),type='l')
dataOriginal = read.csv("../Database/dataSetLaptops.csv",header = T,  stringsAsFactors=T, na.strings = "null",
colClasses=c("numeric","numeric","factor","numeric","factor","factor","factor","factor",
"factor","numeric","numeric","numeric","factor","numeric","factor","factor","factor"))
setwd("C:/Users/Stefan/Dropbox/workplaces/R Studio/IS eBay project")
setwd("C:/Users/Stefan/Dropbox/workplaces/Java/IS eBay")
dataOriginal = read.csv("../Database/dataSetLaptops.csv",header = T,  stringsAsFactors=T, na.strings = "null",
colClasses=c("numeric","numeric","factor","numeric","factor","factor","factor","factor",
"factor","numeric","numeric","numeric","factor","numeric","factor","factor","factor"))
setwd("C:/Users/Stefan/Dropbox/workplaces/Java/IS eBay/R_Scripts")
dataOriginal = read.csv("../Database/dataSetLaptops.csv",header = T,  stringsAsFactors=T, na.strings = "null",
colClasses=c("numeric","numeric","factor","numeric","factor","factor","factor","factor",
"factor","numeric","numeric","numeric","factor","numeric","factor","factor","factor"))
#apply(dataOriginal,2,typeof)
# Filtering and preprocessing data
data = dataOriginal[,-1] # itemID
# HINT: is.na(data$attribute) is added becouse condition on NA is NA insted of T/F. Example: data[ condition ,]
data = data[data$shippingCurrency=="USD" & !is.na(data$shippingCurrency),]
data = data[data$sellingCurrency=="USD" & !is.na(data$sellingCurrency),]
data = data[,-2] #sellingCurrency
data = data[,-3] #shippingCurrency
data = data[data$sellingPrice<=2000 | is.na(data$sellingPrice),]
data = data[data$sellingPrice>20 | is.na(data$sellingPrice),]
data = data[(data$ramGB<=32 | is.na(data$ramGB)),]
data = data[data$processorSpeedGHZ<=4 | is.na(data$processorSpeedGHZ),]
data = data[data$hardDriveGB<=4000 | is.na(data$hardDriveGB),]
data = data[data$screenSize<=20 | is.na(data$screenSize),]
data[data$condition=="Brand New","condition"] = "New"
data[data$condition=="Like New","condition"] = "New"
data[data$condition=="New other (see details)","condition"] = "New"
levels(data$condition)
for(j in c("returnShippingPaidBy","type","brand","operatingSystem","processorType","releaseYear","graphicsProcessingType" )){
for(i in 1:nrow(data)){
if(is.na(data[i,j])) data[i,j] = sample(levels(data[,j]),1)
}
}
?write.csv
for(i in 1:nrow(data)){
if(is.na(data[i,"condition"])) data[i,"condition"] = sample(c("For parts or not working","Manufacturer refurbished","New","Seller refurbished","Used"),1)
}
for(j in c("shippingPrice","screenSize","hardDriveGB","ramGB","processorSpeedGHZ")){
median = median((data[,j]),na.rm=TRUE)
for(i in 1:nrow(data)){
if(is.na(data[i,j])) data[i,j] = median
}
}
rm(i,j,median)
write.csv(data,"../Database/sataSetLaptopsPreprocessed.csv", quote=FALSE, row.names=FALSE)
d = read.csv("../Database/sataSetLaptopsPreprocessed.csv")
View(d)
data = dataOriginal[,-1] # itemID
data = data[data$shippingCurrency=="USD" & !is.na(data$shippingCurrency),]
data = data[data$sellingCurrency=="USD" & !is.na(data$sellingCurrency),]
data = data[,-2] #sellingCurrency
data = data[,-3] #shippingCurrency
data = data[data$sellingPrice<=2000 | is.na(data$sellingPrice),]
data = data[data$sellingPrice>20 | is.na(data$sellingPrice),]
data = data[(data$ramGB<=32 | is.na(data$ramGB)),]
data = data[data$processorSpeedGHZ<=4 | is.na(data$processorSpeedGHZ),]
data = data[data$hardDriveGB<=4000 | is.na(data$hardDriveGB),]
data = data[data$screenSize<=20 | is.na(data$screenSize),]
data[data$condition=="Brand New","condition"] = "New"
data[data$condition=="Like New","condition"] = "New"
data[data$condition=="New other (see details)","condition"] = "New"
# Vizualization
write.csv(data,"../Database/dataSetLaptopsPreprocessedWithMissing.csv", quote=FALSE, row.names=FALSE)
summary(data$hardDriveGB)
plot(data$hardDriveGB)
plot(data$hardDriveGB,data$sellingPrice)
for(j in c("returnShippingPaidBy","type","brand","operatingSystem","processorType","releaseYear","graphicsProcessingType" )){
for(i in 1:nrow(data)){
if(is.na(data[i,j])) data[i,j] = sample(levels(data[,j]),1)
}
}
for(i in 1:nrow(data)){
if(is.na(data[i,"condition"])) data[i,"condition"] = sample(c("For parts or not working","Manufacturer refurbished","New","Seller refurbished","Used"),1)
}
for(j in c("shippingPrice","screenSize","hardDriveGB","ramGB","processorSpeedGHZ")){
median = median((data[,j]),na.rm=TRUE)
for(i in 1:nrow(data)){
if(is.na(data[i,j])) data[i,j] = median
}
}
rm(i,j,median)
rm(d)
data = read.csv("../Database/dataSetLaptopsPreprocessed.csv")
install.packages("rpart")
library(rpart)
fit <- rpart(sellingPrice ~ .,
method="anova", data=data)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
# create attractive postscript plot of tree
post(fit, file = "c:/tree.ps",
title = "Classification Tree for Kyphosis")
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=1)
install.packages("party)
)
""
"
install.packages("party")
library("party")
install.packages("party")
library("party")
fit <- ctree(sellingPrice ~ .,
data=data)
plot(fit, main="Conditional Inference Tree for Kyphosis")
fit <- lm(sellingPrice ~ ., data=data)
summary(fit) # show results
coefficients(fit) # model coefficients
confint(fit, level=0.95) # CIs for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
vcov(fit) # covariance matrix for model parameters
heatmap(vcov(fit)) # covariance matrix for model parameters
influence(fit) # regression diagnostics
fit2 <- lm(sellingPrice ~ . + I(.^2))
fit2 <- lm(sellingPrice ~ . + I(.^2), data=data)
View(data)
fit2 <- lm(sellingPrice ~ data[,-1] + I(data[,-1]^2), data=data)
